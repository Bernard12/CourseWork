#include <stdio.h>



typedef struct stack {
	elem* head;
	int size;
}stack;

typedef struct elem {
	char symbol;
	elem* next;
}elem;

//Functions for stack: Create, IsEmpty, top, push, pop
//Functions for stack - ready;

stack *Create() {
	stack *s = (stack*)malloc(sizeof(stack));
	s->size = 0;
	s->head = NULL;
	return s;
}

void push(stack *S, char head) {
	elem* el = (elem*)malloc(sizeof(elem));
	el->next = NULL;
	el->symbol = head;
	if (S->head == NULL) {
		S->head = el;
		S->size++;
	}
	else {
		el->next = S->head;
		S->head = el;
		S->size++;
	}
}

char pop(stack *s) {
	if (s->head == NULL) {
		return -1;
	}
	Elem *el = s->head;
	s->head = s->head->next;
	s->size--;
	char symbol = el->symbol;
	free(el);
	return (symbol);
}

char top(stack *s) {
	if (s->head == NULL) {
		printf("stack is empty \n");
	}
	else {
		printf("lalala%c\n", s->head->symbol);
	}
	return (s->head->symbol);
}

int IsEmpty(stack *s) {
	if (s->head == NULL) {
		return 1;
	}
	else return 0;
}

int priority(char symbol) {
	switch (symbol) {
	case '^':
		return 4;
	break;
	case '*':
		return 3;
	break;
	case '/':
		return 3;
	break;
	case '+':
		return 2;
	break;
	case '-':
		return 2;
	break;
	case ')':
		return 1;
	break;
	case '(':
		return 0;
	break;
	default:
		return -1;
		printf("In func priority - exception");
	break;
	}
}


int main()
{
	char string[80];
	int i = 0;
	scanf("%s", string);
	stack *res = Create();
	stack *temp = Create();
	while ((string[i] != '\0')) {//КОНЕЦ СТРОКИ/ФАЙЛА. Вспомни.
		if ((string[i] >= 'a'&&string[i] <= 'z') || (string[i] >= '0'&&string[i] <= '9'))
        {
			push(res, string[i]);
			top(res);
		}
		else if (string[i] == ')') {
			while (top(temp) != '(') {
				push(res, pop(temp));
				/*printf("string[i] %c \n", string[i]);
				printf("top(temp)");
				top(temp);*/
			}
			pop(temp);
		}
		else if ((string[i] == '*') || (string[i] == '/') || (string[i] == '+') || (string[i] == '-') || (string[i] == '^') || (string[i] == '(')) {
			if (IsEmpty(temp) == 1) {
				push(temp, string[i]);
			}
			else
            {
				if (priority(top(temp)) > priority(string[i]))
                {
					push(res, pop(temp));
				}
				push(temp, string[i]);
			}
		}
		i++;
	}
	while (!IsEmpty(temp))
    {
		push(res, pop(temp));
	}
	free(temp);
	printf("Stack is ready");
}
